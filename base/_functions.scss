/*====================FUNCTIONS========================*/

@function z-order($list, $position){
  $z : index($list, $position);
  
  @if $z{
  	@return $z;
  }
  
  @else{
  	@warn "There is no #{$position} position in the list";
  	@return null;
  }
}

@function convert($value, $curr-unit, $conv-unit){
  @if $curr-unit == px{
    @if $conv-unit == percent{
      @return percentage($value / 16);
    }
    @else if $conv-unit == ems{
      @return $value / 16+em;
    }
    @else{
      @warn "#{$conv-unit} is not a valid output unit";
      @return null;
    }
  }
  
  @if $curr-unit == pt{
    @if $conv-unit == px{
      @return $value * 1.3333+px;
    }
    @else if $conv-unit == percent{
      @return percentage($value / 12);
    }
    @else if $conv-unit == ems{
      @return $value / 12+em;
    }
    @else{
      @warn "#{$conv-unit} is not a valid output unit";
      @return null;
    }
  }
  
  @if $curr-unit == ems{
    @if $conv-unit == px{
      @return $value * 16+px;
    }
    @else if $conv-unit == percent{
      @return percentage($value);
    }
    @else{
      @warn "#{$conv-unit} is not valid for the input given";
      @return null;
    }
  }
  
  @if $curr-unit == percent{
    @if $conv-unit == px{
      @return $value * 16 / 100+px;
    }
    @else if $conv-unit == ems{
      @return $value / 100+ems;
    }
    @else{
      @warn "#{$conv-unit} is not valid for the input given";
      @return null;
    }
  }

}// --- end convert function


/*=================Math functions====================*/

@function power($base, $exp: 2){
  $value: $base;
  
  @if $exp > 1{
    @for $i from 2 through $exp{
      $value: $value * $base;
    } 
  }
  @if $exp < 1{
    @for $i from 0 through -$exp{
      $value: $value / $base;
    }
  }
  @return $value;
}


@function log($result, $base: 10){
  $counter: 1;
  $value: $base;
  
  @if $base > 0{
    @if $result == 1{
      $counter: 0;
    }
    @else if $base == $result{
      $counter: 1;
    }
    @else{
      @while $base < $result{
          $base: $base * $value;
          $counter: $counter + 1;
      }
    }
  }
  @return $counter;
}

